NRL Preorder Traversal + dfs recursion

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def rightSideView(self, root: Optional[TreeNode]) -> List[int]:
        result=[]
        def dfs(node,currentLevel,result):
            if node is None:
                return
            if(currentLevel>=len(result)):
                result.append(node.val)
            if(node.right):
                dfs(node.right,currentLevel+1,result)
            if(node.left):
                dfs(node.left,currentLevel+1,result)
        dfs(root,0,result)
        return result
        
Time complexity: skewed to the left: O(N)
Space: size of the recursion stack: O(N) 

bfs utilized a queue that holds the nodes by level.

KEY POINT: 
if we get a highly skewed tree, then BFS is better.
If we get a full and complete binary tree, then DFS is better
For regular trees, the height of the tree is the 
the space of the recursion in most cases, with dfs recursion, the space is the height of the tree. The recursive calls have stacks on it for different levels. O(H). 
fOR bfs, the queue is the size of the level(the fattest).O(W)
