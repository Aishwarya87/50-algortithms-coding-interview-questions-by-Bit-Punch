--> What do we return if there are no oranges? 
Return 0 if there are no oranges
[] or [[][]]; return 0

Oranges are rotting 'level by level' in a radiating manner. Rot in the immediate vicinity of the BFS.

--> Subproblem: check is there are any orange left after the BFS (implementing queue) traversal that is still fresh. If yes, return -1
Scan through the 2-d aray at the last.
Every ring represents a new minute.
Tracking system: that tells that its the end of that level.

--> Step 1:
sequential order traversal for:
rotting oranges
keep track of fresh oranges

--> Step 2: When to increment the minutes variable?
this is done while the cells in the queue are processed(layer by layer).
len(q) initially=2(?because 2 rotten oranges)
drop the length in iteration.

class Solution:
    def orangesRotting(self, grid: List[List[int]]) -> int:
        
        if not len(grid): return 0
        totalRows,totalCols= len(grid), len(grid[0])
        ROTTEN=2
        FRESH=1
        EMPTY=0
        directions=[[-1,0],[1,0],[0,-1],[0,1]]
        queue=[]
        freshOranges=0
        
        for r in range(totalRows):
            for c in range(totalCols):
                if grid[r][c]==ROTTEN:
                    queue.append([r,c])
                if grid[r][c]==FRESH:
                    freshOranges+=1
        
        currentQueueSize = len(queue)
        minutes=0
        
        #Implement BFS
        while(len(queue)):
            if currentQueueSize==0:
                minutes+=1
                currentQueueSize=len(queue)
            currentOrange= queue.pop(0)
            currentQueueSize-=1
            row = currentOrange[0]
            col = currentOrange[1]
            for direction in directions:
                nextrow=direction[0]+row  #-1+3
                nextcol=direction[1]+col
                if nextrow<0 or nextrow>=totalRows or nextcol<0 or nextcol>=totalCols:
                    continue
                if grid[nextrow][nextcol] ==FRESH:
                    grid[nextrow][nextcol]= ROTTEN
                    freshOranges-=1
                    queue.append([nextrow, nextcol])
                    
        if freshOranges>0:
            return -1
        return minutes
                    
                    
TC: O(mn): or O(total size of the 2D array)
SC: if the entire grid/List is full of rotten oranges, then queue wil start off with all of the values in the matrix/grid.
O(N)



                 
