Pattern Matching- UNIQUE CHARACTERS.

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        if len(s)<=1:
            return len(s)  #quick optimization for the edge cases
        longest=0
        left,right=0,0
        seen={}
        while right<len(s):
            currChar=s[right]
            if currChar in seen:
                prevSeen=seen[currChar]
                if prevSeen>=left:
                    left=prevSeen+1
            seen[currChar]=right
            longest=max(longest,right-left+1)
            right+=1
            
        return longest

TIME COMPLEXITY: O(N): because the time scales up in the size of the input.
SPACE COMPLEXITY: O(N): beacuse of the dictionary/ hash map in the worst case where it the characters in the string are non-repeated.

Insight: we use seen.get(currentChar) or .set objects or methods when the original Data Structure uses the object notation(new Map)
