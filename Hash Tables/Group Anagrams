An anagram is a word formed by rearranging the letters of a different word. such as: eat, tea, ate

Approach: append the string to the key of the sorted string in the hashmap.

Time complexity: O(N* M* LOG(M))
N= length of the input array

M= length of the biggest string in the array
Sorting algo:  M*LogM : since we sort each string when we pass over it in the loop.

Space Complexity: O(N): hashmap



class Solution:
    def findHash(self,s):
        return ''.join(sorted(s)) #The sorted() function returns a sorted list of letters. Hence have to join the elements together to form a word.
    
    
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        answers= []
        m={}
        for s in strs:
            hashed= self.findHash(s) #sorted version of s 
            print(hashed)
            if hashed not in m:
                m[hashed]=[]
            m[hashed].append(s)
            
        for v in m.values():
            answers.append(v)
         
        return answers
        
        
